{"version":3,"sources":["github.min.js"],"names":["root","factory","define","amd","Promise","Base64","Utf8","axios","Github","module","exports","require","base64","utf8","this","b64encode","string","encode","polyfill","options","API_URL","apiUrl","_request","method","path","data","cb","raw","getURL","url","indexOf","test","param","hasOwnProperty","encodeURIComponent","window","Date","getTime","config","headers","Accept","Content-Type","username","password","token","then","response","request","status","error","_requestAllPages","results","iterate","err","res","xhr","push","apply","links","link","split","next","forEach","exec","User","repos","arguments","length","params","type","sort","per_page","page","join","orgs","gists","notifications","all","participating","since","constructor","toISOString","before","show","command","userRepos","userStarred","userGists","orgRepos","orgname","follow","unfollow","createRepo","Repository","updateTree","branch","currentTree","sha","that","getRef","repoPath","repo","name","user","fullname","deleteRepo","ref","object","createRef","deleteRef","listTags","tags","listPulls","state","head","base","direction","pulls","getPull","number","pull","compare","diff","listBranches","heads","map","replace","getBlob","getCommit","commit","getSha","pathContent","getStatuses","getTree","tree","postBlob","content","encoding","baseTree","blob","base_tree","mode","postTree","parent","message","userData","author","email","parents","updateHead","contributors","retry","setTimeout","contents","encodeURI","fork","listForks","oldBranch","newBranch","createPullRequest","listHooks","getHook","id","createHook","editHook","deleteHook","read","obj","remove","move","newPath","latestCommit","rootTree","write","writeOptions","committer","undefined","getCommits","until","perpage","Gist","gistPath","create","update","star","unstar","isStarred","Issue","list","query","key","comment","issue","comments_url","body","Search","repositories","code","issues","users","getIssues","getRepo","getUser","getGist","getSearch"],"mappings":"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","file":"github.min.js","sourcesContent":["/*!\r\n * @overview  Github.js\r\n *\r\n * @copyright (c) 2013 Michael Aufreiter, Development Seed\r\n *            Github.js is freely distributable.\r\n *\r\n * @license   Licensed under BSD-3-Clause-Clear\r\n *\r\n *            For all details and documentation:\r\n *            http://substance.io/michael/github\r\n */\r\n'use strict';\r\n\r\n(function (root, factory) {\r\n   /* istanbul ignore next */\r\n   if (typeof define === 'function' && define.amd) {\r\n      define(['es6-promise', 'base-64', 'utf8', 'axios'], function (Promise, Base64, Utf8, axios) {\r\n         return (root.Github = factory(Promise, Base64, Utf8, axios));\r\n      });\r\n   } else if (typeof module === 'object' && module.exports) {\r\n      module.exports = factory(require('es6-promise'), require('base-64'), require('utf8'), require('axios'));\r\n   } else {\r\n      root.Github = factory(root.Promise, root.base64, root.utf8, root.axios);\r\n   }\r\n}(this, function(Promise, Base64, Utf8, axios) {\r\n   function b64encode(string) {\r\n      return Base64.encode(Utf8.encode(string));\r\n   }\r\n\r\n   if (Promise.polyfill) {\r\n      Promise.polyfill();\r\n   }\r\n\r\n   // Initial Setup\r\n   // -------------\r\n\r\n   var Github = function (options) {\r\n      var API_URL = options.apiUrl || 'https://api.github.com';\r\n\r\n      // HTTP Request Abstraction\r\n      // =======\r\n      //\r\n      // I'm not proud of this and neither should you be if you were responsible for the XMLHttpRequest spec.\r\n\r\n      var _request = Github._request = function _request(method, path, data, cb, raw) {\r\n         function getURL() {\r\n            var url = path.indexOf('//') >= 0 ? path : API_URL + path;\r\n\r\n            url += ((/\\?/).test(url) ? '&' : '?');\r\n\r\n            if (data && typeof data === 'object' && ['GET', 'HEAD', 'DELETE'].indexOf(method) > -1) {\r\n               for (var param in data) {\r\n                  if (data.hasOwnProperty(param))\r\n                     url += '&' + encodeURIComponent(param) + '=' + encodeURIComponent(data[param]);\r\n               }\r\n            }\r\n\r\n            return url + (typeof window !== 'undefined' ? '&' + new Date().getTime() : '');\r\n         }\r\n\r\n         var config = {\r\n            headers: {\r\n               Accept: raw ? 'application/vnd.github.v3.raw+json' : 'application/vnd.github.v3+json',\r\n               'Content-Type': 'application/json;charset=UTF-8'\r\n            },\r\n            method: method,\r\n            data: data ? data : {},\r\n            url: getURL()\r\n         };\r\n\r\n         if ((options.token) || (options.username && options.password)) {\r\n            config.headers['Authorization'] = options.token ?\r\n            'token ' + options.token :\r\n            'Basic ' + b64encode(options.username + ':' + options.password);\r\n         }\r\n\r\n         return axios(config)\r\n            .then(function (response) {\r\n               cb(\r\n                  null,\r\n                  response.data || true,\r\n                  response.request\r\n               );\r\n            }, function (response) {\r\n               if (response.status === 304) {\r\n                  cb(\r\n                     null,\r\n                     response.data || true,\r\n                     response.request\r\n                  );\r\n               } else {\r\n                  cb({\r\n                     path: path,\r\n                     request: response.request,\r\n                     error: response.status\r\n                  });\r\n               }\r\n            });\r\n      };\r\n\r\n      var _requestAllPages = Github._requestAllPages = function _requestAllPages(path, cb) {\r\n         var results = [];\r\n\r\n         (function iterate() {\r\n            _request('GET', path, null, function (err, res, xhr) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               results.push.apply(results, res);\r\n\r\n               var links = (xhr.headers.link || '').split(/\\s*,\\s*/g);\r\n               var next = null;\r\n\r\n               links.forEach(function (link) {\r\n                  next = /rel=\"next\"/.test(link) ? link : next;\r\n               });\r\n\r\n               if (next) {\r\n                  next = (/<(.*)>/.exec(next) || [])[1];\r\n               }\r\n\r\n               if (!next) {\r\n                  cb(err, results);\r\n               } else {\r\n                  path = next;\r\n                  iterate();\r\n               }\r\n            });\r\n         })();\r\n      };\r\n\r\n      // User API\r\n      // =======\r\n\r\n      Github.User = function () {\r\n         this.repos = function (options, cb) {\r\n            if (arguments.length === 1 && typeof arguments[0] === 'function') {\r\n               cb = options;\r\n               options = {};\r\n            }\r\n\r\n            options = options || {};\r\n\r\n            var url = '/user/repos';\r\n            var params = [];\r\n\r\n            params.push('type=' + encodeURIComponent(options.type || 'all'));\r\n            params.push('sort=' + encodeURIComponent(options.sort || 'updated'));\r\n            params.push('per_page=' + encodeURIComponent(options.per_page || '100')); // jscs:ignore\r\n\r\n            if (options.page) {\r\n               params.push('page=' + encodeURIComponent(options.page));\r\n            }\r\n\r\n            url += '?' + params.join('&');\r\n\r\n            _request('GET', url, null, cb);\r\n         };\r\n\r\n         // List user organizations\r\n         // -------\r\n\r\n         this.orgs = function (cb) {\r\n            _request('GET', '/user/orgs', null, cb);\r\n         };\r\n\r\n         // List authenticated user's gists\r\n         // -------\r\n\r\n         this.gists = function (cb) {\r\n            _request('GET', '/gists', null, cb);\r\n         };\r\n\r\n         // List authenticated user's unread notifications\r\n         // -------\r\n\r\n         this.notifications = function (options, cb) {\r\n            if (arguments.length === 1 && typeof arguments[0] === 'function') {\r\n               cb = options;\r\n               options = {};\r\n            }\r\n\r\n            options = options || {};\r\n            var url = '/notifications';\r\n            var params = [];\r\n\r\n            if (options.all) {\r\n               params.push('all=true');\r\n            }\r\n\r\n            if (options.participating) {\r\n               params.push('participating=true');\r\n            }\r\n\r\n            if (options.since) {\r\n               var since = options.since;\r\n\r\n               if (since.constructor === Date) {\r\n                  since = since.toISOString();\r\n               }\r\n\r\n               params.push('since=' + encodeURIComponent(since));\r\n            }\r\n\r\n            if (options.before) {\r\n               var before = options.before;\r\n\r\n               if (before.constructor === Date) {\r\n                  before = before.toISOString();\r\n               }\r\n\r\n               params.push('before=' + encodeURIComponent(before));\r\n            }\r\n\r\n            if (options.page) {\r\n               params.push('page=' + encodeURIComponent(options.page));\r\n            }\r\n\r\n            if (params.length > 0) {\r\n               url += '?' + params.join('&');\r\n            }\r\n\r\n            _request('GET', url, null, cb);\r\n         };\r\n\r\n         // Show user information\r\n         // -------\r\n\r\n         this.show = function (username, cb) {\r\n            var command = username ? '/users/' + username : '/user';\r\n\r\n            _request('GET', command, null, cb);\r\n         };\r\n\r\n         // List user repositories\r\n         // -------\r\n\r\n         this.userRepos = function (username, cb) {\r\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\r\n            _requestAllPages('/users/' + username + '/repos?type=all&per_page=100&sort=updated', cb);\r\n         };\r\n\r\n         // List user starred repositories\r\n         // -------\r\n\r\n         this.userStarred = function (username, cb) {\r\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\r\n            _requestAllPages('/users/' + username + '/starred?type=all&per_page=100', function (err, res) {\r\n               cb(err, res);\r\n            });\r\n         };\r\n\r\n         // List a user's gists\r\n         // -------\r\n\r\n         this.userGists = function (username, cb) {\r\n            _request('GET', '/users/' + username + '/gists', null, cb);\r\n         };\r\n\r\n         // List organization repositories\r\n         // -------\r\n\r\n         this.orgRepos = function (orgname, cb) {\r\n            // Github does not always honor the 1000 limit so we want to iterate over the data set.\r\n            _requestAllPages('/orgs/' + orgname + '/repos?type=all&&page_num=1000&sort=updated&direction=desc', cb);\r\n         };\r\n\r\n         // Follow user\r\n         // -------\r\n\r\n         this.follow = function (username, cb) {\r\n            _request('PUT', '/user/following/' + username, null, cb);\r\n         };\r\n\r\n         // Unfollow user\r\n         // -------\r\n\r\n         this.unfollow = function (username, cb) {\r\n            _request('DELETE', '/user/following/' + username, null, cb);\r\n         };\r\n\r\n         // Create a repo\r\n         // -------\r\n         this.createRepo = function (options, cb) {\r\n            _request('POST', '/user/repos', options, cb);\r\n         };\r\n      };\r\n\r\n      // Repository API\r\n      // =======\r\n\r\n      Github.Repository = function (options) {\r\n         var repo = options.name;\r\n         var user = options.user;\r\n         var fullname = options.fullname;\r\n\r\n         var that = this;\r\n         var repoPath;\r\n\r\n         if (fullname) {\r\n            repoPath = '/repos/' + fullname;\r\n         } else {\r\n            repoPath = '/repos/' + user + '/' + repo;\r\n         }\r\n\r\n         var currentTree = {\r\n            branch: null,\r\n            sha: null\r\n         };\r\n\r\n         // Delete a repo\r\n         // --------\r\n\r\n         this.deleteRepo = function (cb) {\r\n            _request('DELETE', repoPath, options, cb);\r\n         };\r\n\r\n         // Uses the cache if branch has not been changed\r\n         // -------\r\n\r\n         function updateTree(branch, cb) {\r\n            if (branch === currentTree.branch && currentTree.sha) {\r\n               return cb(null, currentTree.sha);\r\n            }\r\n\r\n            that.getRef('heads/' + branch, function (err, sha) {\r\n               currentTree.branch = branch;\r\n               currentTree.sha = sha;\r\n               cb(err, sha);\r\n            });\r\n         }\r\n\r\n         // Get a particular reference\r\n         // -------\r\n\r\n         this.getRef = function (ref, cb) {\r\n            _request('GET', repoPath + '/git/refs/' + ref, null, function (err, res, xhr) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               cb(null, res.object.sha, xhr);\r\n            });\r\n         };\r\n\r\n         // Create a new reference\r\n         // --------\r\n         //\r\n         // {\r\n         //   \"ref\": \"refs/heads/my-new-branch-name\",\r\n         //   \"sha\": \"827efc6d56897b048c772eb4087f854f46256132\"\r\n         // }\r\n\r\n         this.createRef = function (options, cb) {\r\n            _request('POST', repoPath + '/git/refs', options, cb);\r\n         };\r\n\r\n         // Delete a reference\r\n         // --------\r\n         //\r\n         // Repo.deleteRef('heads/gh-pages')\r\n         // repo.deleteRef('tags/v1.0')\r\n\r\n         this.deleteRef = function (ref, cb) {\r\n            _request('DELETE', repoPath + '/git/refs/' + ref, options, function (err, res, xhr) {\r\n               cb(err, res, xhr);\r\n            });\r\n         };\r\n\r\n         // Create a repo\r\n         // -------\r\n\r\n         this.createRepo = function (options, cb) {\r\n            _request('POST', '/user/repos', options, cb);\r\n         };\r\n\r\n         // Delete a repo\r\n         // --------\r\n\r\n         this.deleteRepo = function (cb) {\r\n            _request('DELETE', repoPath, options, cb);\r\n         };\r\n\r\n         // List all tags of a repository\r\n         // -------\r\n\r\n         this.listTags = function (cb) {\r\n            _request('GET', repoPath + '/tags', null, function (err, tags, xhr) {\r\n               if (err) {\r\n                  return cb(err);\r\n               }\r\n\r\n               cb(null, tags, xhr);\r\n            });\r\n         };\r\n\r\n         // List all pull requests of a respository\r\n         // -------\r\n\r\n         this.listPulls = function (options, cb) {\r\n            options = options || {};\r\n            var url = repoPath + '/pulls';\r\n            var params = [];\r\n\r\n            if (typeof options === 'string') {\r\n               // Backward compatibility\r\n               params.push('state=' + options);\r\n            } else {\r\n               if (options.state) {\r\n                  params.push('state=' + encodeURIComponent(options.state));\r\n               }\r\n\r\n               if (options.head) {\r\n                  params.push('head=' + encodeURIComponent(options.head));\r\n               }\r\n\r\n               if (options.base) {\r\n                  params.push('base=' + encodeURIComponent(options.base));\r\n               }\r\n\r\n               if (options.sort) {\r\n                  params.push('sort=' + encodeURIComponent(options.sort));\r\n               }\r\n\r\n               if (options.direction) {\r\n                  params.push('direction=' + encodeURIComponent(options.direction));\r\n               }\r\n\r\n               if (options.page) {\r\n                  params.push('page=' + options.page);\r\n               }\r\n\r\n               if (options.per_page) {\r\n                  params.push('per_page=' + options.per_page);\r\n               }\r\n            }\r\n\r\n            if (params.length > 0) {\r\n               url += '?' + params.join('&');\r\n            }\r\n\r\n            _request('GET', url, null, function (err, pulls, xhr) {\r\n               if (err) return cb(err);\r\n               cb(null, pulls, xhr);\r\n            });\r\n         };\r\n\r\n         // Gets details for a specific pull request\r\n         // -------\r\n\r\n         this.getPull = function (number, cb) {\r\n            _request('GET', repoPath + '/pulls/' + number, null, function (err, pull, xhr) {\r\n               if (err) return cb(err);\r\n               cb(null, pull, xhr);\r\n            });\r\n         };\r\n\r\n         // Retrieve the changes made between base and head\r\n         // -------\r\n\r\n         this.compare = function (base, head, cb) {\r\n            _request('GET', repoPath + '/compare/' + base + '...' + head, null, function (err, diff, xhr) {\r\n               if (err) return cb(err);\r\n               cb(null, diff, xhr);\r\n            });\r\n         };\r\n\r\n         // List all branches of a repository\r\n         // -------\r\n\r\n         this.listBranches = function (cb) {\r\n            _request('GET', repoPath + '/git/refs/heads', null, function (err, heads, xhr) {\r\n               if (err) return cb(err);\r\n               cb(null, heads.map(function (head) {\r\n                  return head.ref.replace(/^refs\\/heads\\//, '');\r\n               }), xhr);\r\n            });\r\n         };\r\n\r\n         // Retrieve the contents of a blob\r\n         // -------\r\n\r\n         this.getBlob = function (sha, cb) {\r\n            _request('GET', repoPath + '/git/blobs/' + sha, null, cb, 'raw');\r\n         };\r\n\r\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\r\n         // -------\r\n\r\n         this.getCommit = function (branch, sha, cb) {\r\n            _request('GET', repoPath + '/git/commits/' + sha, null, function (err, commit, xhr) {\r\n               if (err) return cb(err);\r\n               cb(null, commit, xhr);\r\n            });\r\n         };\r\n\r\n         // For a given file path, get the corresponding sha (blob for files, tree for dirs)\r\n         // -------\r\n\r\n         this.getSha = function (branch, path, cb) {\r\n            if (!path || path === '') return that.getRef('heads/' + branch, cb);\r\n            _request('GET', repoPath + '/contents/' + path + (branch ? '?ref=' + branch : ''),\r\n               null, function (err, pathContent, xhr) {\r\n                  if (err) return cb(err);\r\n                  cb(null, pathContent.sha, xhr);\r\n               });\r\n         };\r\n\r\n         // Get the statuses for a particular SHA\r\n         // -------\r\n\r\n         this.getStatuses = function (sha, cb) {\r\n            _request('GET', repoPath + '/statuses/' + sha, null, cb);\r\n         };\r\n\r\n         // Retrieve the tree a commit points to\r\n         // -------\r\n\r\n         this.getTree = function (tree, cb) {\r\n            _request('GET', repoPath + '/git/trees/' + tree, null, function (err, res, xhr) {\r\n               if (err) return cb(err);\r\n               cb(null, res.tree, xhr);\r\n            });\r\n         };\r\n\r\n         // Post a new blob object, getting a blob SHA back\r\n         // -------\r\n\r\n         this.postBlob = function (content, cb) {\r\n            if (typeof (content) === 'string') {\r\n               content = {\r\n                  content: content,\r\n                  encoding: 'utf-8'\r\n               };\r\n            } else {\r\n               content = {\r\n                  content: b64encode(content),\r\n                  encoding: 'base64'\r\n               };\r\n            }\r\n\r\n            _request('POST', repoPath + '/git/blobs', content, function (err, res) {\r\n               if (err) return cb(err);\r\n               cb(null, res.sha);\r\n            });\r\n         };\r\n\r\n         // Update an existing tree adding a new blob object getting a tree SHA back\r\n         // -------\r\n\r\n         this.updateTree = function (baseTree, path, blob, cb) {\r\n            var data = {\r\n               base_tree: baseTree,\r\n               tree: [\r\n                  {\r\n                     path: path,\r\n                     mode: '100644',\r\n                     type: 'blob',\r\n                     sha: blob\r\n                  }\r\n               ]\r\n            };\r\n\r\n            _request('POST', repoPath + '/git/trees', data, function (err, res) {\r\n               if (err) return cb(err);\r\n               cb(null, res.sha);\r\n            });\r\n         };\r\n\r\n         // Post a new tree object having a file path pointer replaced\r\n         // with a new blob SHA getting a tree SHA back\r\n         // -------\r\n\r\n         this.postTree = function (tree, cb) {\r\n            _request('POST', repoPath + '/git/trees', {\r\n               tree: tree\r\n            }, function (err, res) {\r\n               if (err) return cb(err);\r\n               cb(null, res.sha);\r\n            });\r\n         };\r\n\r\n         // Create a new commit object with the current commit SHA as the parent\r\n         // and the new tree SHA, getting a commit SHA back\r\n         // -------\r\n\r\n         this.commit = function (parent, tree, message, cb) {\r\n            var user = new Github.User();\r\n\r\n            user.show(null, function (err, userData) {\r\n               if (err) return cb(err);\r\n               var data = {\r\n                  message: message,\r\n                  author: {\r\n                     name: options.user,\r\n                     email: userData.email\r\n                  },\r\n                  parents: [\r\n                     parent\r\n                  ],\r\n                  tree: tree\r\n               };\r\n\r\n               _request('POST', repoPath + '/git/commits', data, function (err, res) {\r\n                  if (err) return cb(err);\r\n                  currentTree.sha = res.sha; // Update latest commit\r\n                  cb(null, res.sha);\r\n               });\r\n            });\r\n         };\r\n\r\n         // Update the reference of your head to point to the new commit SHA\r\n         // -------\r\n\r\n         this.updateHead = function (head, commit, cb) {\r\n            _request('PATCH', repoPath + '/git/refs/heads/' + head, {\r\n               sha: commit\r\n            }, function (err) {\r\n               cb(err);\r\n            });\r\n         };\r\n\r\n         // Show repository information\r\n         // -------\r\n\r\n         this.show = function (cb) {\r\n            _request('GET', repoPath, null, cb);\r\n         };\r\n\r\n         // Show repository contributors\r\n         // -------\r\n\r\n         this.contributors = function (cb, retry) {\r\n            retry = retry || 1000;\r\n            var that = this;\r\n\r\n            _request('GET', repoPath + '/stats/contributors', null, function (err, data, xhr) {\r\n               if (err) return cb(err);\r\n\r\n               if (xhr.status === 202) {\r\n                  setTimeout(\r\n                     function () {\r\n                        that.contributors(cb, retry);\r\n                     },\r\n                     retry\r\n                  );\r\n               } else {\r\n                  cb(err, data, xhr);\r\n               }\r\n            });\r\n         };\r\n\r\n         // Get contents\r\n         // --------\r\n\r\n         this.contents = function (ref, path, cb) {\r\n            path = encodeURI(path);\r\n            _request('GET', repoPath + '/contents' + (path ? '/' + path : ''), {\r\n               ref: ref\r\n            }, cb);\r\n         };\r\n\r\n         // Fork repository\r\n         // -------\r\n\r\n         this.fork = function (cb) {\r\n            _request('POST', repoPath + '/forks', null, cb);\r\n         };\r\n\r\n         // List forks\r\n         // --------\r\n\r\n         this.listForks = function (cb) {\r\n            _request('GET', repoPath + '/forks', null, cb);\r\n         };\r\n\r\n         // Branch repository\r\n         // --------\r\n\r\n         this.branch = function (oldBranch, newBranch, cb) {\r\n            if (arguments.length === 2 && typeof arguments[1] === 'function') {\r\n               cb = newBranch;\r\n               newBranch = oldBranch;\r\n               oldBranch = 'master';\r\n            }\r\n\r\n            this.getRef('heads/' + oldBranch, function (err, ref) {\r\n               if (err && cb) return cb(err);\r\n               that.createRef({\r\n                  ref: 'refs/heads/' + newBranch,\r\n                  sha: ref\r\n               }, cb);\r\n            });\r\n         };\r\n\r\n         // Create pull request\r\n         // --------\r\n\r\n         this.createPullRequest = function (options, cb) {\r\n            _request('POST', repoPath + '/pulls', options, cb);\r\n         };\r\n\r\n         // List hooks\r\n         // --------\r\n\r\n         this.listHooks = function (cb) {\r\n            _request('GET', repoPath + '/hooks', null, cb);\r\n         };\r\n\r\n         // Get a hook\r\n         // --------\r\n\r\n         this.getHook = function (id, cb) {\r\n            _request('GET', repoPath + '/hooks/' + id, null, cb);\r\n         };\r\n\r\n         // Create a hook\r\n         // --------\r\n\r\n         this.createHook = function (options, cb) {\r\n            _request('POST', repoPath + '/hooks', options, cb);\r\n         };\r\n\r\n         // Edit a hook\r\n         // --------\r\n\r\n         this.editHook = function (id, options, cb) {\r\n            _request('PATCH', repoPath + '/hooks/' + id, options, cb);\r\n         };\r\n\r\n         // Delete a hook\r\n         // --------\r\n\r\n         this.deleteHook = function (id, cb) {\r\n            _request('DELETE', repoPath + '/hooks/' + id, null, cb);\r\n         };\r\n\r\n         // Read file at given path\r\n         // -------\r\n\r\n         this.read = function (branch, path, cb) {\r\n            _request('GET', repoPath + '/contents/' + encodeURI(path) + (branch ? '?ref=' + branch : ''),\r\n               null, function (err, obj, xhr) {\r\n                  if (err && err.error === 404) return cb('not found', null, null);\r\n\r\n                  if (err) return cb(err);\r\n                  cb(null, obj, xhr);\r\n               }, true);\r\n         };\r\n\r\n         // Remove a file\r\n         // -------\r\n\r\n         this.remove = function (branch, path, cb) {\r\n            that.getSha(branch, path, function (err, sha) {\r\n               if (err) return cb(err);\r\n               _request('DELETE', repoPath + '/contents/' + path, {\r\n                  message: path + ' is removed',\r\n                  sha: sha,\r\n                  branch: branch\r\n               }, cb);\r\n            });\r\n         };\r\n\r\n         // Alias for repo.remove for backwards comapt.\r\n         // -------\r\n         this.delete = this.remove;\r\n\r\n         // Move a file to a new location\r\n         // -------\r\n\r\n         this.move = function (branch, path, newPath, cb) {\r\n            updateTree(branch, function (err, latestCommit) {\r\n               that.getTree(latestCommit + '?recursive=true', function (err, tree) {\r\n                  // Update Tree\r\n                  tree.forEach(function (ref) {\r\n                     if (ref.path === path) ref.path = newPath;\r\n\r\n                     if (ref.type === 'tree') delete ref.sha;\r\n                  });\r\n\r\n                  that.postTree(tree, function (err, rootTree) {\r\n                     that.commit(latestCommit, rootTree, 'Deleted ' + path, function (err, commit) {\r\n                        that.updateHead(branch, commit, function (err) {\r\n                           cb(err);\r\n                        });\r\n                     });\r\n                  });\r\n               });\r\n            });\r\n         };\r\n\r\n         // Write file contents to a given branch and path\r\n         // -------\r\n\r\n         this.write = function (branch, path, content, message, options, cb) {\r\n            if (typeof cb === 'undefined') {\r\n               cb = options;\r\n               options = {};\r\n            }\r\n\r\n            that.getSha(branch, encodeURI(path), function (err, sha) {\r\n               var writeOptions = {\r\n                  message: message,\r\n                  content: typeof options.encode === 'undefined' || options.encode ? b64encode(content) : content,\r\n                  branch: branch,\r\n                  committer: options && options.committer ? options.committer : undefined,\r\n                  author: options && options.author ? options.author : undefined\r\n               };\r\n\r\n               // If no error, we set the sha to overwrite an existing file\r\n               if (!(err && err.error !== 404)) writeOptions.sha = sha;\r\n               _request('PUT', repoPath + '/contents/' + encodeURI(path), writeOptions, cb);\r\n            });\r\n         };\r\n\r\n         // List commits on a repository. Takes an object of optional parameters:\r\n         // sha: SHA or branch to start listing commits from\r\n         // path: Only commits containing this file path will be returned\r\n         // author: Only commits by this author will be returned. Its value can be the GitHub login or the email address\r\n         // since: ISO 8601 date - only commits after this date will be returned\r\n         // until: ISO 8601 date - only commits before this date will be returned\r\n         // -------\r\n\r\n         this.getCommits = function (options, cb) {\r\n            options = options || {};\r\n            var url = repoPath + '/commits';\r\n            var params = [];\r\n\r\n            if (options.sha) {\r\n               params.push('sha=' + encodeURIComponent(options.sha));\r\n            }\r\n\r\n            if (options.path) {\r\n               params.push('path=' + encodeURIComponent(options.path));\r\n            }\r\n\r\n            if (options.author) {\r\n               params.push('author=' + encodeURIComponent(options.author));\r\n            }\r\n\r\n            if (options.since) {\r\n               var since = options.since;\r\n\r\n               if (since.constructor === Date) {\r\n                  since = since.toISOString();\r\n               }\r\n\r\n               params.push('since=' + encodeURIComponent(since));\r\n            }\r\n\r\n            if (options.until) {\r\n               var until = options.until;\r\n\r\n               if (until.constructor === Date) {\r\n                  until = until.toISOString();\r\n               }\r\n\r\n               params.push('until=' + encodeURIComponent(until));\r\n            }\r\n\r\n            if (options.page) {\r\n               params.push('page=' + options.page);\r\n            }\r\n\r\n            if (options.perpage) {\r\n               params.push('per_page=' + options.perpage);\r\n            }\r\n\r\n            if (params.length > 0) {\r\n               url += '?' + params.join('&');\r\n            }\r\n\r\n            _request('GET', url, null, cb);\r\n         };\r\n      };\r\n\r\n      // Gists API\r\n      // =======\r\n\r\n      Github.Gist = function (options) {\r\n         var id = options.id;\r\n         var gistPath = '/gists/' + id;\r\n\r\n         // Read the gist\r\n         // --------\r\n\r\n         this.read = function (cb) {\r\n            _request('GET', gistPath, null, cb);\r\n         };\r\n\r\n         // Create the gist\r\n         // --------\r\n         // {\r\n         //  \"description\": \"the description for this gist\",\r\n         //    \"public\": true,\r\n         //    \"files\": {\r\n         //      \"file1.txt\": {\r\n         //        \"content\": \"String file contents\"\r\n         //      }\r\n         //    }\r\n         // }\r\n\r\n         this.create = function (options, cb) {\r\n            _request('POST', '/gists', options, cb);\r\n         };\r\n\r\n         // Delete the gist\r\n         // --------\r\n\r\n         this.delete = function (cb) {\r\n            _request('DELETE', gistPath, null, cb);\r\n         };\r\n\r\n         // Fork a gist\r\n         // --------\r\n\r\n         this.fork = function (cb) {\r\n            _request('POST', gistPath + '/fork', null, cb);\r\n         };\r\n\r\n         // Update a gist with the new stuff\r\n         // --------\r\n\r\n         this.update = function (options, cb) {\r\n            _request('PATCH', gistPath, options, cb);\r\n         };\r\n\r\n         // Star a gist\r\n         // --------\r\n\r\n         this.star = function (cb) {\r\n            _request('PUT', gistPath + '/star', null, cb);\r\n         };\r\n\r\n         // Untar a gist\r\n         // --------\r\n\r\n         this.unstar = function (cb) {\r\n            _request('DELETE', gistPath + '/star', null, cb);\r\n         };\r\n\r\n         // Check if a gist is starred\r\n         // --------\r\n\r\n         this.isStarred = function (cb) {\r\n            _request('GET', gistPath + '/star', null, cb);\r\n         };\r\n      };\r\n\r\n      // Issues API\r\n      // ==========\r\n\r\n      Github.Issue = function (options) {\r\n         var path = '/repos/' + options.user + '/' + options.repo + '/issues';\r\n\r\n         this.list = function (options, cb) {\r\n            var query = [];\r\n\r\n            for (var key in options) {\r\n               if (options.hasOwnProperty(key)) {\r\n                  query.push(encodeURIComponent(key) + '=' + encodeURIComponent(options[key]));\r\n               }\r\n            }\r\n\r\n            _requestAllPages(path + '?' + query.join('&'), cb);\r\n         };\r\n\r\n         this.comment = function (issue, comment, cb) {\r\n            _request('POST', issue.comments_url, {\r\n               body: comment\r\n            }, function (err, res) {\r\n               cb(err, res);\r\n            });\r\n         };\r\n      };\r\n\r\n      // Search API\r\n      // ==========\r\n\r\n      Github.Search = function (options) {\r\n         var path = '/search/';\r\n         var query = '?q=' + options.query;\r\n\r\n         this.repositories = function (options, cb) {\r\n            _request('GET', path + 'repositories' + query, options, cb);\r\n         };\r\n\r\n         this.code = function (options, cb) {\r\n            _request('GET', path + 'code' + query, options, cb);\r\n         };\r\n\r\n         this.issues = function (options, cb) {\r\n            _request('GET', path + 'issues' + query, options, cb);\r\n         };\r\n\r\n         this.users = function (options, cb) {\r\n            _request('GET', path + 'users' + query, options, cb);\r\n         };\r\n      };\r\n\r\n      return Github;\r\n   };\r\n\r\n// Top Level API\r\n// -------\r\n\r\n   Github.getIssues = function (user, repo) {\r\n      return new Github.Issue({\r\n         user: user,\r\n         repo: repo\r\n      });\r\n   };\r\n\r\n   Github.getRepo = function (user, repo) {\r\n      if (!repo) {\r\n         return new Github.Repository({\r\n            fullname: user\r\n         });\r\n      } else {\r\n         return new Github.Repository({\r\n            user: user,\r\n            name: repo\r\n         });\r\n      }\r\n   };\r\n\r\n   Github.getUser = function () {\r\n      return new Github.User();\r\n   };\r\n\r\n   Github.getGist = function (id) {\r\n      return new Github.Gist({\r\n         id: id\r\n      });\r\n   };\r\n\r\n   Github.getSearch = function (query) {\r\n      return new Github.Search({\r\n         query: query\r\n      });\r\n   };\r\n\r\n   return Github;\r\n}));"],"sourceRoot":"/source/"}